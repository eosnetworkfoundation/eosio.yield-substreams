// Generated by antelope-abi2rs 0.3.0 - eosio::abi/1.2

use serde::{Deserialize, Serialize};

type Asset = String;
type Name = String;
type Symbol = String;
type TimePointSec = String;
type Int16 = i16;
type Uint16 = u16;
type Uint32 = u32;

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct ExtendedAsset {
    pub quantity: Asset,
    pub contract: Name,
}


macro_rules! impl_try_from_str {
    ($type:ty) => {
        impl TryFrom<&str> for $type {
            type Error = serde_json::Error;
            #[inline]
            fn try_from(str: &str) -> Result<Self, Self::Error> {
                serde_json::from_str(str)
            }
        }
    };
}


#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Approve {
    pub protocol: Name,
}
impl_try_from_str!(Approve);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Claim {
    pub protocol: Name,
    pub receiver: Option<Name>,
    pub evm_receiver: Option<String>,
}
impl_try_from_str!(Claim);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Claimlog {
    pub protocol: Name,
    pub category: Name,
    pub receiver: Name,
    pub evm_receiver: String,
    pub claimed: Asset,
    pub balance: Asset,
}
impl_try_from_str!(Claimlog);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct ConfigRow {
    pub annual_rate: Uint16,
    pub min_tvl_report: Asset,
    pub max_tvl_report: Asset,
    pub rewards: ExtendedSymbol,
    pub oracle_contract: Name,
    pub admin_contract: Name,
}
impl_try_from_str!(ConfigRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Contractslog {
    pub protocol: Name,
    pub status: Name,
    pub contracts: Vec<Name>,
    pub evm: Vec<String>,
}
impl_try_from_str!(Contractslog);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Createlog {
    pub protocol: Name,
    pub status: Name,
    pub category: Name,
    pub metadata: Vec<PairNameString>,
}
impl_try_from_str!(Createlog);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Deny {
    pub protocol: Name,
}
impl_try_from_str!(Deny);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Eraselog {
    pub protocol: Name,
}
impl_try_from_str!(Eraselog);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct ExtendedSymbol {
    pub sym: Symbol,
    pub contract: Name,
}
impl_try_from_str!(ExtendedSymbol);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Init {
    pub rewards: ExtendedSymbol,
    pub oracle_contract: Name,
    pub admin_contract: Name,
}
impl_try_from_str!(Init);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Metadatalog {
    pub protocol: Name,
    pub status: Name,
    pub category: Name,
    pub metadata: Vec<PairNameString>,
}
impl_try_from_str!(Metadatalog);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct PairNameString {
    pub first: Name,
    pub second: String,
}
impl_try_from_str!(PairNameString);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct ProtocolsRow {
    pub protocol: Name,
    pub status: Name,
    pub category: Name,
    pub contracts: Vec<Name>,
    pub evm_contracts: Vec<String>,
    pub tvl: Asset,
    pub usd: Asset,
    pub balance: ExtendedAsset,
    pub metadata: Vec<PairNameString>,
    pub created_at: TimePointSec,
    pub updated_at: TimePointSec,
    pub claimed_at: TimePointSec,
    pub period_at: TimePointSec,
}
impl_try_from_str!(ProtocolsRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Regprotocol {
    pub protocol: Name,
    pub category: Name,
    pub metadata: Vec<PairNameString>,
}
impl_try_from_str!(Regprotocol);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Report {
    pub protocol: Name,
    pub period: TimePointSec,
    pub period_interval: Uint32,
    pub tvl: Asset,
    pub usd: Asset,
}
impl_try_from_str!(Report);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Rewardslog {
    pub protocol: Name,
    pub category: Name,
    pub period: TimePointSec,
    pub period_interval: Uint32,
    pub tvl: Asset,
    pub usd: Asset,
    pub rewards: Asset,
    pub balance: Asset,
}
impl_try_from_str!(Rewardslog);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setcategory {
    pub protocol: Name,
    pub category: Name,
}
impl_try_from_str!(Setcategory);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setcontracts {
    pub protocol: Name,
    pub contracts: Vec<Name>,
    pub evm_contracts: Vec<String>,
}
impl_try_from_str!(Setcontracts);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setmetadata {
    pub protocol: Name,
    pub metadata: Vec<PairNameString>,
}
impl_try_from_str!(Setmetadata);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setmetakey {
    pub protocol: Name,
    pub key: Name,
    pub value: Option<String>,
}
impl_try_from_str!(Setmetakey);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setrate {
    pub annual_rate: Option<Int16>,
    pub min_tvl_report: Option<Asset>,
    pub max_tvl_report: Option<Asset>,
}
impl_try_from_str!(Setrate);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct StateRow {
    pub active_protocols: Vec<Name>,
}
impl_try_from_str!(StateRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Statuslog {
    pub protocol: Name,
    pub status: Name,
}
impl_try_from_str!(Statuslog);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Unregister {
    pub protocol: Name,
}
impl_try_from_str!(Unregister);

